buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
}

apply plugin: 'org.spongepowered.mixin'

group = 'io.github.settingdust'
version = '0.12.1'

java {
    archivesBaseName = 'dawncraft-fixes'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.18.2'

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'dawncraft-fixes'

            property 'mixin.debug.export', 'true'
            property 'mixin.checks.interfaces', 'true'
            property 'mixin.hotSwap', 'true'
            property 'mixin.debug.verbose', 'true'

            mods {
                dawncraftfixes {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'dawncraft-fixes'

            mods {
                dawncraftfixes {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'dawncraft-fixes'

            mods {
                dawncraftfixes {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'dawncraftfixes', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                dawncraftfixes {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "dawncraft-fixes.refmap.json"

    config "dawncraft-fixes.mixins.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    flatDir {
        dir 'libs'
    }

    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }

    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven { url 'https://jitpack.io' }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.18.2-40.2.1'

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    implementation fg.deobf("curse.maven:braincellapi-616354:3820306")
    implementation fg.deobf("curse.maven:dannys-expansion-425918:3820328")

    implementation fg.deobf("curse.maven:epic-fight-mod-405076:4447075")
    implementation fg.deobf("curse.maven:epicfight-dual-greatsword-654098:3972299")

    implementation fg.deobf("curse.maven:unvoted-shelved-551999:4373652")
    implementation fg.deobf("curse.maven:goblins-dungeons-535096:3785691")
    implementation fg.deobf("curse.maven:callable-horses-331746:4111364")
    implementation fg.deobf("curse.maven:hit-indication-848933:4555284")

    implementation fg.deobf("curse.maven:untamedwilds-457252:4534274")
    runtimeOnly fg.deobf("curse.maven:citadel-331936:3783096")

    implementation fg.deobf("curse.maven:integrated-api-817709:4446913")
    runtimeOnly fg.deobf("curse.maven:feature-nbt-deadlock-be-gone-560323:3669114")

    implementation fg.deobf('com.feywild.quest_giver:Quest_Giver:1.18.2-1.0.7')
    runtimeOnly fg.deobf("curse.maven:guard-villagers-360203:3823106")
    runtimeOnly fg.deobf("curse.maven:reputation-579116:4412129")
    runtimeOnly fg.deobf("curse.maven:more-villagers-484954:3843498")
    runtimeOnly fg.deobf("curse.maven:libx-412525:3909225")
    runtimeOnly fg.deobf("curse.maven:dawncraft-tweaks-638098:4544277")
    runtimeOnly fg.deobf("curse.maven:atlas-lib-463826:4417565")
    runtimeOnly fg.deobf("curse.maven:orcz-581652:3945799")
    runtimeOnly fg.deobf("curse.maven:difficult-raids-599116:4578894")
    runtimeOnly fg.deobf("curse.maven:illage-and-spillage-576368:3912773")
    runtimeOnly fg.deobf("curse.maven:biome-makeover-forge-567709:4062225")
    runtimeOnly fg.deobf("curse.maven:hunterillager-318857:3752127")
    runtimeOnly fg.deobf("curse.maven:savage-and-ravage-381736:4396963")

    runtimeOnly fg.deobf("curse.maven:irons-spells-n-spellbooks-855414:4577001")
    runtimeOnly fg.deobf("curse.maven:caelus-308989:3650485")
    runtimeOnly fg.deobf("curse.maven:curios-309927:4590652")
    runtimeOnly fg.deobf("curse.maven:playeranimator-658587:4418152")
    runtimeOnly fg.deobf("curse.maven:geckolib-388172:4181370")
    runtimeOnly fg.deobf("curse.maven:architectury-api-419699:4521465")
    runtimeOnly fg.deobf("curse.maven:blueprint-382216:3991478")
    runtimeOnly fg.deobf("curse.maven:follow-me-463841:3919507")
    runtimeOnly fg.deobf("simplemobs:dawncraft_mobs:1.18-0.9.6a")
    runtimeOnly fg.deobf("curse.maven:mowzies-mobs-250498:4142172")
    runtimeOnly fg.deobf("curse.maven:blood-and-madness-461017:4536670")
    runtimeOnly fg.deobf("curse.maven:ars-nouveau-401955:4543053")
    runtimeOnly fg.deobf("curse.maven:patchouli-306770:3846086")

    implementation fg.deobf("curse.maven:alexs-cloud-storage-606618:3757407")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    compileOnly annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:${mixin_extras_version}")
    implementation jarJar("com.github.llamalad7.mixinextras:mixinextras-forge:${mixin_extras_version}") {
        transitive = false
        jarJar.ranged it, "[${mixin_extras_version},)"
    }

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar.finalizedBy('reobfJar')

tasks.jarJar {
    classifier ""
    from "LICENSE"
}

tasks.jarJar.finalizedBy(reobf.maybeCreate("jarJar"))

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

jar {
    archiveClassifier = 'slim'

    manifest {
        attributes([
                "Specification-Title"     : "dawncraftfixes",
                "Specification-Vendor"    : "SettingDust",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "SettingDust",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
